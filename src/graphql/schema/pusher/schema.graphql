type Mutation {
  authenticateUser(input: AuthenticateUserInput!): AuthenticateUserPayload!
  authorizeChannel(input: AuthorizeChannelInput!): AuthorizeChannelPayload!
  callEvent(input: CallEventInput!): CallEventPayload!
  matching(input: MatchingInput!): MatchingPayload!
}

input AuthenticateUserInput {
  socketId: String!
}

type AuthenticateUserPayload {
  data: AuthenticateUserData
  status: Int!
}

type AuthenticateUserData {
  auth: String!
  userData: String!
}

input AuthorizeChannelInput {
  socketId: String!
  channelName: String!
}

type AuthorizeChannelPayload {
  data: AuthorizeChannelData
  status: Int!
}

type AuthorizeChannelData {
  auth: String!
  channelData: String
  sharedSecret: String
}

input CallEventInput {
  socketId: String
  channelName: String!
  event: String!
  data: [CallEventData!]
}

input CallEventData {
  key: String!
  value: String!
}

type CallEventPayload {
  success: Boolean!
  message: String
}

input MatchingInput {
  channelName: String!
}

type MatchingPayload {
  result: MatchingResult
  status: Int!
}

interface MatchingResult {
  type: MatchingResultType!
}

enum MatchingResultType {
  SUCCESS
  RETRY
  TIMEOUT
}

type MatchingSuccess implements MatchingResult {
  type: MatchingResultType!
  roomId: ID!
}

type MatchingRetry implements MatchingResult {
  type: MatchingResultType!
}

type MatchingTimeout implements MatchingResult {
  type: MatchingResultType!
}
