type Mutation {
  authenticateUser(input: AuthenticateUserInput!): AuthenticateUserPayload!
  authorizeChannel(input: AuthorizeChannelInput!): AuthorizeChannelPayload!
  callEvent(input: CallEventInput!): CallEventPayload!
  createMatching(input: CreateMatchingInput!): CreateMatchingPayload!
}

input AuthenticateUserInput {
  socketId: String!
}

type AuthenticateUserPayload {
  data: AuthenticateUserData
  status: Int!
}

type AuthenticateUserData {
  auth: String!
  userData: String!
}

input AuthorizeChannelInput {
  socketId: String!
  channelName: String!
}

type AuthorizeChannelPayload {
  data: AuthorizeChannelData
  status: Int!
}

type AuthorizeChannelData {
  auth: String!
  channelData: String
  sharedSecret: String
}

input CallEventInput {
  socketId: String
  channelName: String!
  event: String!
  data: [CallEventData!]
}

input CallEventData {
  key: String!
  value: String!
}

type CallEventPayload {
  success: Boolean!
  message: String
}

input CreateMatchingInput {
  channelName: String!
}

type CreateMatchingPayload {
  result: CreateMatchingResult
  status: Int!
}

interface CreateMatchingResult {
  type: CreateMatchingResultType!
}

enum CreateMatchingResultType {
  SUCCESS
  RETRY
  TIMEOUT
}

type MatchingSuccess implements CreateMatchingResult {
  type: CreateMatchingResultType!
  roomId: ID!
}

type MatchingRetry implements CreateMatchingResult {
  type: CreateMatchingResultType!
}

type MatchingTimeout implements CreateMatchingResult {
  type: CreateMatchingResultType!
}
