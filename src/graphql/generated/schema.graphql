type AuthenticateUserData {
  auth: String!
  userData: String!
}

input AuthenticateUserInput {
  socketId: String!
}

type AuthenticateUserPayload {
  data: AuthenticateUserData
  status: Int!
}

type AuthorizeChannelData {
  auth: String!
  channelData: String
  sharedSecret: String
}

input AuthorizeChannelInput {
  channelName: String!
  socketId: String!
}

type AuthorizeChannelPayload {
  data: AuthorizeChannelData
  status: Int!
}

input CallEventData {
  key: String!
  value: String!
}

input CallEventInput {
  channel: String!
  data: [CallEventData!]
  event: String!
  socketId: String
}

type CallEventPayload {
  message: String
  success: Boolean!
}

type Mutation {
  authenticateUser(input: AuthenticateUserInput!): AuthenticateUserPayload!
  authorizeChannel(input: AuthorizeChannelInput!): AuthorizeChannelPayload!
  callEvent(input: CallEventInput!): CallEventPayload!
}

type Query {
  user(id: ID!): User
  users: [User!]!
}

type User {
  age: Int!
  id: ID!
  name: String!
}