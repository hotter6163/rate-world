// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./schema.md"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts     Account[]
  sessions     Session[]
  arenaRecords ArenaParticipant[]
  games        UserGame[]

  @@map("users")
}

enum Game {
  BATTLE_LINE
}

model UserGame {
  userId String @map("user_id")
  game   Game
  rating Int

  user User @relation(fields: [userId], references: [id])

  @@id([userId, game])
}

model Arena {
  id          String      @id @default(cuid())
  game        Game
  status      ArenaStatus
  matchingAt  DateTime    @default(now())
  startedAt   DateTime?   @map("stated_at")
  completedAt DateTime?   @map("completed_at")
  canceledAt  DateTime?   @map("canceled_at")

  participants ArenaParticipant[]

  @@map("arenas")
}

enum ArenaStatus {
  MATCHING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model ArenaParticipant {
  arenaId        String       @map("arena_id")
  participantId  String       @map("participant_id")
  matchRating    Int          @map("match_rating")
  matchResult    MatchResult? @map("match_result")
  participatedAt DateTime?    @map("participanted_at")

  arena       Arena @relation(fields: [arenaId], references: [id])
  participant User  @relation(fields: [participantId], references: [id])

  @@id([arenaId, participantId])
  @@map("arena_participants")
}

enum MatchResult {
  WIN
  LOSE
  DRAW
  NOT_SHOW
}
